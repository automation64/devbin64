#!/usr/bin/env bash
#
# Development environment / Global variables
#
# * Used by DevBin64 to define project wide variables
# * Automatically loaded by dev-set
# * Do not include local variables (workstation specific) and secrets. Use .local and .secrets instead
# * Version: 3.2.0
#

# Main / Base file and directory names
export DEV_BASE_BUILD="build"
export DEV_BASE_TEST="test"
export DEV_BASE_SRC="src"
export DEV_BASE_DOT_LOCAL="dot.local"
export DEV_BASE_LOCAL=".local"
export DEV_BASE_DOT_SECRETS="dot.secrets"
export DEV_BASE_SECRETS=".secrets"
export DEV_BASE_ENV=".env"
export DEV_BASE_CHANGELOG="CHANGELOG.md"

# Main / Project source code
export DEV_PATH_SRC="${DEV_PATH_ROOT}/${DEV_BASE_SRC}"

# Main / Project test code
export DEV_PATH_TEST="${DEV_PATH_ROOT}/${DEV_BASE_TEST}"

# Main / Project configuration files
export DEV_PATH_ETC="${DEV_PATH_ROOT}/etc"

# Main / Project documentation
export DEV_PATH_DOCS="${DEV_PATH_ROOT}/docs"

# Main / DevOps scripts
export DEV_PATH_BIN="${DEV_PATH_ROOT}/bin"

# Main / DevOps persistent data
export DEV_PATH_VAR="${DEV_PATH_ROOT}/var"

# Main / DevOps ephemeral tools. Content excluded from GIT
export DEV_PATH_LIB="${DEV_PATH_ROOT}/lib"

# Main / DevOps builds. Content excluded from GIT
export DEV_PATH_BUILD="${DEV_PATH_ROOT}/${DEV_BASE_BUILD}"

# Main / DevOps local vault for secrets. Content excluded from GIT
export DEV_PATH_VAULT="${DEV_PATH_ROOT}/vault"

# Main / DevOps logs store. Content excluded from GIT
export DEV_PATH_LOGS="${DEV_PATH_ROOT}/logs"

# Main / DevOps ephemeral data. Content excluded from GIT
export DEV_PATH_TMP="${DEV_PATH_ROOT}/tmp"

#
# DevOps Tools
#

# Lib / Installer64 / Repo Owner
export DEV_LIB_INSTALLER64_OWNER="automation64/installer64"
# Lib / Installer64 / Target
export DEV_LIB_INSTALLER64_TARGET="${DEV_PATH_LIB}/inst64"

# Lib / BashLib64 / Target
export DEV_LIB_BASHLIB64_TARGET="${DEV_PATH_LIB}/bl64"

# Release / GitHub / Repository Owner
export DEV_RELEASE_GITHUB_REPO_OWNER='automation64'
# Release / GitHub / Repository Name
export DEV_RELEASE_GITHUB_REPO_NAME='devbin64'

# Lint / TestmanSH / Sources
export DEV_LINT_TESTMANSH_SOURCE=''
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/ansible/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/ansiblelint/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/bash/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/bashlib64/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/container/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/cosign/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/devbin64/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/git/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/github/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/go/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/hadolint/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/installer64/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/kind/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/mkdocs/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/testmansh/bin"
DEV_LINT_TESTMANSH_SOURCE+=" ${DEV_BASE_SRC}/yamllint/bin"

#
# Project specific variables
#

# Build / Custom / Package files
export DEV_BUILD_CUSTOM_CONTENT=''
DEV_BUILD_CUSTOM_CONTENT+=" ${DEV_PATH_SRC}/devbin64/bin/dev-bootstrap"
DEV_BUILD_CUSTOM_CONTENT+=" ${DEV_PATH_SRC}/devbin64/bin/dev-lib-local"
DEV_BUILD_CUSTOM_CONTENT+=" ${DEV_PATH_SRC}/devbin64/bin/dev-set"
DEV_BUILD_CUSTOM_CONTENT+=" ${DEV_PATH_SRC}/installer64/bin/dev-env-installer64"
DEV_BUILD_CUSTOM_CONTENT+=" ${DEV_PATH_SRC}/installer64/bin/dev-lib-installer64"
DEV_BUILD_CUSTOM_CONTENT+=" ${DEV_PATH_SRC}/bashlib64/bin/dev-lib-bashlib64"

# Pack / Custom / Package name
export DEV_PACK_CUSTOM_NAME_BUNDLE='devbin64.tar.gz'
# Pack / Custom / Packages destination
export DEV_PACK_CUSTOM_STORE="${DEV_PATH_BUILD}/pack}"

# Release / GitHub / Artifact path
export DEV_RELEASE_GITHUB_ARTIFACT="${DEV_PACK_CUSTOM_STORE}/${DEV_PACK_CUSTOM_NAME_BUNDLE}"
