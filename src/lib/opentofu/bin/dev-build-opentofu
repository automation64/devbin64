#!/usr/bin/env bash
# template-task: 1.8.0
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

# shellcheck source=bin/dev-set
source ./bin/dev-set || { echo 'dev-set:Error: unable to load dev environment' 2>&1 && exit 1; }
# shellcheck source-path=bin
source ./bin/dev-env-opentofu || exit 1
# shellcheck source-path=lib/bl64
source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-xsv.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-bsh.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-txt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fmt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fs.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-core.bash" || exit 1

declare MY_SOURCE="${1:-${DEV_PATH_SRC}}"
declare MY_STAGING="${2:-${DEV_BUILD_OPENTOFU_STAGING}}"
declare MY_CONFIG="${3:-$BL64_VAR_DEFAULT}"

function my_build() {
  bl64_dbg_app_show_function

  if bl64_lib_flag_is_enabled "$DEV_BUILD_OPENTOFU_RESET"; then
    bl64_msg_show_task 'Reset staging environment'
    bl64_fs_path_remove "$MY_STAGING"
  fi

  bl64_msg_show_task 'Create staging environment'
  # shellcheck disable=SC2046
  bl64_fs_file_remove \
    $(bl64_bsh_pattern_match_file "$MY_STAGING"/*.tofu) \
    $(bl64_bsh_pattern_match_file "$MY_STAGING"/*.tf) \
    $(bl64_bsh_pattern_match_file "$MY_STAGING"/*.tfvars)
  bl64_fs_dir_create \
    "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$MY_STAGING" ||
    return $?

  bl64_msg_show_task 'Promote source code to staging'

  bl64_fs_path_merge \
    "$MY_SOURCE" \
    "$MY_STAGING" ||
    return $?

  if [[ -d "$MY_CONFIG" ]]; then
    bl64_msg_show_task 'Promote configuration files to staging'
    bl64_fs_path_merge \
      "$MY_CONFIG" \
      "$MY_STAGING"
  fi
}

function my_initialize() {
  bl64_dbg_app_show_function
  bl64_msg_show_about
  bl64_check_parameter 'MY_SOURCE' &&
    bl64_check_parameter 'MY_STAGING' &&
    bl64_check_directory "$MY_SOURCE" &&
    bl64_msg_show_setup "$BL64_VAR_DEFAULT" \
      'DEV_BUILD_OPENTOFU_RESET' \
      'MY_SOURCE' \
      'MY_CONFIG' \
      'MY_STAGING'
}

[[ -n "$DEV_CICD_DEBUG" ]] && bl64_dbg_all_enable
bl64_lib_script_version_set '2.1.0'
bl64_msg_help_about_set 'Build runtime environment from the source module'
bl64_msg_all_enable_verbose && my_initialize || exit $?

bl64_msg_show_batch_start "$BL64_SCRIPT_ID"
my_build
bl64_msg_show_batch_finish $? "$BL64_SCRIPT_ID"
