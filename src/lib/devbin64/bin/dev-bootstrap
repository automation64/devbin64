#!/usr/bin/env bash
# Template: 1.1.1
#######################################
# Dev / Bootstrap
#
# * Boostrap repository creation:
#   * create basic directory structure
#   * download Installer64 and Bashlib64 tools
#   * publish base DevBin64 modules
#   * publish optional DevBin64 modules (defined in shell-env $DEV_BOOTSTRAP_MODULES or file $DEV_BOOTSTRAP_MODULE_STATE)
# * If the repository is already present, refresh content from local store
#
# Author: SerDigital64 (https://github.com/serdigital64)
# Repository: https://github.com/automation64/installer64
# Version: 6.7.0
#
#######################################
# Copyright SerDigital64 - https://github.com/serdigital64
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at: http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Bootstrap
#

# Verify that the current shell is supported
if [ -z "$BASH_VERSION" ]; then
  echo "Fatal: BashLib64 is not supported in the current shell (shell: $SHELL)"
  exit 1
elif [ "${BASH_VERSINFO[0]}" -lt 4 ]; then
  echo "Fatal: BashLib64 requires Bash V4 or greater (current-version: ${BASH_VERSION})"
  exit 1
fi

# Do not inherit aliases and commands
builtin unset -f unalias
builtin unalias -a
builtin unset -f command
builtin hash -r

# Normalize shtop defaults
builtin shopt -qu \
  'dotglob' \
  'extdebug' \
  'failglob' \
  'globstar' \
  'gnu_errfmt' \
  'huponexit' \
  'lastpipe' \
  'login_shell' \
  'nocaseglob' \
  'nocasematch' \
  'nullglob' \
  'xpg_echo'
builtin shopt -qs \
  'extquote'

# Ensure pipeline exit status is failed when any cmd fails
builtin set -o 'pipefail'

# Enable error processing
builtin set -o 'errtrace'
builtin set -o 'functrace'

# Disable fast-fail. Developer must implement error handling (check for exit status)
builtin set +o 'errexit'

# Reset bash set options to defaults
builtin set -o 'braceexpand'
builtin set -o 'hashall'
builtin set +o 'allexport'
builtin set +o 'histexpand'
builtin set +o 'history'
builtin set +o 'ignoreeof'
builtin set +o 'monitor'
builtin set +o 'noclobber'
builtin set +o 'noglob'
builtin set +o 'nolog'
builtin set +o 'notify'
builtin set +o 'onecmd'
builtin set +o 'posix'

# Do not set/unset - Breaks bats-core
# set -o 'keyword'
# set -o 'noexec'

# Do not inherit sensitive environment variables
builtin unset CDPATH
builtin unset ENV
builtin unset IFS
builtin unset MAIL
builtin unset MAILPATH

#
# Globals
#

# DevBin64 / Current version
declare DEV_BIN64_VERSION='7.9.0'
# DevBin64 / List of optional modules for adding after bootstrap is complete
declare DEV_BOOTSTRAP_MODULES="${DEV_BOOTSTRAP_MODULES:-}"

# Automation64 / Root path
declare DEV_AT64_HOME='/opt'
[[ ! -d "$DEV_AT64_HOME/bl64" && -d "${HOME}/at64/bl64" ]] && DEV_AT64_HOME="${HOME}/at64"
# DevBin64 / Installation path
declare DEV_BOOTSTRAP_PATH_ROOT="${DEV_BOOTSTRAP_PATH_ROOT:-${DEV_AT64_HOME}/devbin64}"

# DevBin64 / Env initial values
export DEV_CICD_DEBUG="${DEV_CICD_DEBUG:-}"
export DEV_BASE_DOT_ENV="dot.env"
export DEV_BASE_DOT_LOCAL="dot.local.env"
export DEV_BASE_DOT_SECRETS="dot.secrets.env"
export DEV_BASE_ENV='.env'
export DEV_BASE_GITKEEP=".gitkeep"
export DEV_BASE_LOCAL=".local.env"
export DEV_BASE_POST=".post.env"
export DEV_BASE_SECRETS=".secrets.env"
export DEV_LIB_BASHLIB64_TARGET=''
export DEV_LIB_INSTALLER64_OWNER='automation64/installer64'
export DEV_LIB_INSTALLER64_TARGET=''
export DEV_PATH_BIN=''
export DEV_PATH_LIB=''
export DEV_PATH_ROOT=''
export DEV_PATH_TMP=''
export DEV_PROFILE=''

# DevBin64 / Constants
declare DEV_BOOTSTRAP_BASHLIB64_NAME='bl64'
declare DEV_BOOTSTRAP_DIR_MODE='0755'
declare DEV_BOOTSTRAP_FILE_MODE='0644'
declare DEV_BOOTSTRAP_INSTALLER64_NAME='inst64'
declare DEV_BOOTSTRAP_PATHS='bin build docs etc lib logs src test tmp var vault'

# DevBin64 / State file name
declare DEV_BOOTSTRAP_STATE='.devbin64'
# DevBin64 / Optional modules
declare DEV_BOOTSTRAP_MODULE_STATE="${DEV_BOOTSTRAP_STATE}-modules"
# DevBin64 / Source modules location
declare DEV_BOOTSTRAP_PATH_LIB="${DEV_BOOTSTRAP_PATH_ROOT}/lib"

# DevBin64 / List of module files for the initial bin/
declare DEV_BOOTSTRAP_FILES=''
DEV_BOOTSTRAP_FILES+=" ${DEV_BOOTSTRAP_PATH_LIB}/bashlib64/bin/dev-env-bashlib64"
DEV_BOOTSTRAP_FILES+=" ${DEV_BOOTSTRAP_PATH_LIB}/bashlib64/bin/dev-lib-bashlib64"
DEV_BOOTSTRAP_FILES+=" ${DEV_BOOTSTRAP_PATH_LIB}/devbin64/bin/dev-init"
DEV_BOOTSTRAP_FILES+=" ${DEV_BOOTSTRAP_PATH_LIB}/devbin64/bin/dev-lib-base"
DEV_BOOTSTRAP_FILES+=" ${DEV_BOOTSTRAP_PATH_LIB}/devbin64/bin/dev-profile-create"
DEV_BOOTSTRAP_FILES+=" ${DEV_BOOTSTRAP_PATH_LIB}/devbin64/bin/dev-profile-remove"
DEV_BOOTSTRAP_FILES+=" ${DEV_BOOTSTRAP_PATH_LIB}/devbin64/bin/dev-profile-list"
DEV_BOOTSTRAP_FILES+=" ${DEV_BOOTSTRAP_PATH_LIB}/devbin64/bin/dev-set"
DEV_BOOTSTRAP_FILES+=" ${DEV_BOOTSTRAP_PATH_LIB}/installer64/bin/dev-env-installer64"
DEV_BOOTSTRAP_FILES+=" ${DEV_BOOTSTRAP_PATH_LIB}/installer64/bin/dev-lib-installer64"

# Installer64 / Parameters
export INST64_BASHLIB64_TARGET=''

#
# Functions
#

function dev_bootstrap_duplicate_remove() {
  local file_old="$1"
  local file_new="$2"
  local diff_command='diff'

  [[ -z "$(command -v "$diff_command" 2>/dev/null)" ]] && return 0
  [[ ! -e "$file_old" || ! -e "$file_new" ]] && return 0

  if "$diff_command" -q "$file_old" "$file_new" >/dev/null 2>&1; then
    rm -f "$file_new"
  else
    cat "$file_new" >"$file_old" &&
      rm -f "$file_new"
  fi
}

function dev_bootstrap_bin_populate_base() {
  local file=''
  echo "Task: populate dev-bin (${DEV_PATH_BIN})"
  for file in $DEV_BOOTSTRAP_FILES; do
    cp "$file" "$DEV_PATH_BIN" ||
      return $?
  done
}

function dev_bootstrap_bin_detect_optional() {
  local module=''

  if [[ -n "$DEV_BOOTSTRAP_MODULES" ]]; then
    if [[ ! -f "$DEV_BOOTSTRAP_MODULE_STATE" ]]; then
      for module in $DEV_BOOTSTRAP_MODULES; do
        echo "$module" >> "$DEV_BOOTSTRAP_MODULE_STATE" || return $?
      done
    else
      return 0
    fi
  fi

  [[ ! -f "$DEV_BOOTSTRAP_MODULE_STATE" ]] && return 0
  for module in $(<$DEV_BOOTSTRAP_MODULE_STATE); do
    DEV_BOOTSTRAP_MODULES+=" $module"
  done
}

function dev_bootstrap_bin_populate_optional() {
  local module_name=''
  local module_path=''

  dev_bootstrap_bin_detect_optional
  [[ -z "$DEV_BOOTSTRAP_MODULES" ]] && return 0

  for module_name in $DEV_BOOTSTRAP_MODULES; do
    module_path="${DEV_BOOTSTRAP_PATH_LIB}/${module_name}/bin"
    if [[ -d "$module_path" ]]; then
      echo "Task: add optional module (${module_name})"
      cp "${module_path}/"* "$DEV_PATH_BIN"
    else
      echo "Warning: optional module content not found (${module_path})"
    fi
  done
}

function dev_bootstrap_lib_local_run() {
  local target=''

  for target in "$DEV_BASE_LOCAL" "$DEV_BASE_SECRETS"; do
    if [[ ! -f "$target" ]]; then
      echo "Task: create local files (${target})"
      grep -v 'ACTION REQUIRED: this is a template file' "dot${target}" >"$target" ||
        return $?
    fi
  done
}

function dev_bootstrap_lib_base_run() {
  echo "Task: deploy base tools (installer64 / bashlib64)"
  "${DEV_PATH_BIN}/dev-lib-base"
}

function dev_bootstrap_dir_create() {
  local path=''
  # shellcheck disable=SC2086
  for path in $DEV_BOOTSTRAP_PATHS; do
    [[ -d "$path" ]] && continue
    echo "Task: create main directory structure (${path})"
    mkdir \
      -m "$DEV_BOOTSTRAP_DIR_MODE" \
      "$path"
  done
}

function dev_bootstrap_dot_env_create() {
  local file_target=''
  local file_old="$DEV_BASE_DOT_ENV"
  local file_new="${file_old}.new"

  echo "Task: create environment file (${file_old})"
  if [[ -f "$file_old" ]]; then
    file_target="$file_new"
  else
    file_target="$file_old"
  fi

  # shellcheck disable=SC2016,SC1078
  printf '#!/usr/bin/env bash
#
# Development environment / Global variables
#
# * Used by DevBin64 to define project wide variables
# * Automatically loaded by dev-set
# * Do not include local variables (workstation specific) and secrets. Use .local.env and .secrets.env instead
# * Version: 1.0.0
# * Template: 4.2.0
#

# Main / Base file and directory names
export DEV_BASE_BUILD="build"
export DEV_BASE_CHANGELOG="CHANGELOG.md"
export DEV_BASE_DOT_LOCAL="dot.local.env"
export DEV_BASE_DOT_SECRETS="dot.secrets.env"
export DEV_BASE_ENV=".env"
export DEV_BASE_GITKEEP=".gitkeep"
export DEV_BASE_LOCAL=".local.env"
export DEV_BASE_POST=".post.env"
export DEV_BASE_PROFILE="prof"
export DEV_BASE_SECRETS=".secrets.env"
export DEV_BASE_SRC="src"
export DEV_BASE_TEST="test"

# Main / Project source code
export DEV_PATH_SRC="${DEV_PATH_ROOT}/${DEV_BASE_SRC}"

# Main / Project test code
export DEV_PATH_TEST="${DEV_PATH_ROOT}/${DEV_BASE_TEST}"

# Main / Project configuration files
export DEV_PATH_ETC="${DEV_PATH_ROOT}/etc"

# Main / Project documentation
export DEV_PATH_DOCS="${DEV_PATH_ROOT}/docs"

# Main / DevOps scripts
export DEV_PATH_BIN="${DEV_PATH_ROOT}/bin"

# Main / DevOps persistent data
export DEV_PATH_VAR="${DEV_PATH_ROOT}/var"

# Main / DevOps ephemeral tools. Content excluded from GIT
export DEV_PATH_LIB="${DEV_PATH_ROOT}/lib"

# Main / DevOps builds. Content excluded from GIT
export DEV_PATH_BUILD="${DEV_PATH_ROOT}/${DEV_BASE_BUILD}"
export DEV_PATH_BUILD_PREPARE="${DEV_PATH_BUILD}/prepare"
export DEV_PATH_BUILD_STAGING="${DEV_PATH_BUILD}/staging"
export DEV_PATH_BUILD_PACK="${DEV_PATH_BUILD}/pack"

# Main / DevOps local vault for secrets. Content excluded from GIT
export DEV_PATH_VAULT="${DEV_PATH_ROOT}/vault"

# Main / DevOps logs store. Content excluded from GIT
export DEV_PATH_LOGS="${DEV_PATH_ROOT}/logs"

# Main / DevOps ephemeral data. Content excluded from GIT
export DEV_PATH_TMP="${DEV_PATH_ROOT}/tmp"

# Main / Profile dependant variables
export DEV_PROFILE="${DEV_PROFILE:-none}"
export DEV_PATH_PROF_BUILD="${DEV_PATH_BUILD}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
export DEV_PATH_PROF_ETC="${DEV_PATH_ETC}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
export DEV_PATH_PROF_LOGS="${DEV_PATH_LOGS}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
export DEV_PATH_PROF_TMP="${DEV_PATH_TMP}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
export DEV_PATH_PROF_VAR="${DEV_PATH_VAR}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"
export DEV_PATH_PROF_VAULT="${DEV_PATH_VAULT}/${DEV_BASE_PROFILE}/${DEV_PROFILE}"

#
# DevOps Tools
#

# Main / List of modules to load
export DEV_MODULE_LOAD=""

#
# Project specific variables
#
' \
    "$DEV_BASE_DOT_LOCAL" \
    "$DEV_BASE_LOCAL" \
    "$DEV_BASE_POST" \
    "$DEV_BASE_DOT_SECRETS" \
    "$DEV_BASE_SECRETS" \
    "$DEV_BASE_ENV" \
    >"$file_target" &&
    chmod "$DEV_BOOTSTRAP_FILE_MODE" "$file_target" &&
    dev_bootstrap_duplicate_remove "$file_old" "$file_new"
}

function dev_bootstrap_env_create() {
  if [[ ! -f "$DEV_BASE_ENV" ]]; then
    echo "Task: create environment file (${DEV_BASE_ENV})"
    cat "$DEV_BASE_DOT_ENV" >"$DEV_BASE_ENV"
    chmod "$DEV_BOOTSTRAP_FILE_MODE" "$DEV_BASE_ENV"
  fi
}

function dev_bootstrap_dot_local_create() {
  local file_target=''
  local file_old="$DEV_BASE_DOT_LOCAL"
  local file_new="${file_old}.new"

  echo "Task: create environment file (${file_old})"
  if [[ -f "$file_old" ]]; then
    file_target="$file_new"
  else
    file_target="$file_old"
  fi

  cp "${DEV_BOOTSTRAP_PATH_LIB}/devbin64/bin/${DEV_BASE_DOT_LOCAL}" "$file_target" &&
    chmod "$DEV_BOOTSTRAP_FILE_MODE" "$file_target" &&
    dev_bootstrap_duplicate_remove "$file_old" "$file_new"
}

function dev_bootstrap_dot_secrets_create() {
  local file_target=''
  local file_old="$DEV_BASE_DOT_SECRETS"
  local file_new="${file_old}.new"

  echo "Task: create environment file (${file_old})"
  if [[ -f "$file_old" ]]; then
    file_target="$file_new"
  else
    file_target="$file_old"
  fi
  cp "${DEV_BOOTSTRAP_PATH_LIB}/devbin64/bin/${file_old}" "$file_target" &&
    chmod "$DEV_BOOTSTRAP_FILE_MODE" "$file_target" &&
    dev_bootstrap_duplicate_remove "$file_old" "$file_new"
}

function dev_bootstrap_gitignore_create() {
  local file_target=''
  local file_old=".gitignore"
  local file_new="${file_old}.new"

  echo "Task: create gitignore file (${file_old})"
  if [[ -f "$file_old" ]]; then
    file_target="$file_new"
  else
    file_target="$file_old"
  fi

  echo "Task: create empty directory placeholders (${DEV_BASE_GITKEEP})"
  touch \
    "build/${DEV_BASE_GITKEEP}" \
    "etc/${DEV_BASE_GITKEEP}" \
    "docs/${DEV_BASE_GITKEEP}" \
    "lib/${DEV_BASE_GITKEEP}" \
    "logs/${DEV_BASE_GITKEEP}" \
    "src/${DEV_BASE_GITKEEP}" \
    "test/${DEV_BASE_GITKEEP}" \
    "tmp/${DEV_BASE_GITKEEP}" \
    "var/${DEV_BASE_GITKEEP}" \
    "vault/${DEV_BASE_GITKEEP}" ||
    return $?

  # shellcheck disable=SC2016
  printf '#
# GIT Ignore
#
# * Version: 1.0.0
# * Template: 2.0.1
#

#
# Main
#

/build/*
/lib/*
/logs/*
/tmp/*
/vault/*
/%s
/%s

/.vscode

#
# Project specific exclusions
#

# Keep placeholder for empty directories
!/**/%s
' \
    "$DEV_BASE_LOCAL" \
    "$DEV_BASE_SECRETS" \
    "$DEV_BASE_GITKEEP" \
    >"$file_target" &&
    chmod "$DEV_BOOTSTRAP_FILE_MODE" "$file_target" &&
    dev_bootstrap_duplicate_remove "$file_old" "$file_new"
}

function dev_bootstrap_dot_env_load() {
  echo "Task: load environment file (${DEV_BASE_ENV})"
  if [[ -f "${DEV_BASE_ENV}.new" ]]; then
    # shellcheck disable=SC1090
    source "${DEV_BASE_ENV}.new"
  else
    # shellcheck disable=SC1090
    source "$DEV_BASE_ENV"
  fi
}

function dev_bootstrap_initialize() {
  # Initialize .env variables for the bootstrap process
  DEV_PROFILE=''
  DEV_PATH_ROOT="$(pwd)"
  DEV_PATH_LIB="${DEV_PATH_ROOT}/lib"
  DEV_LIB_BASHLIB64_TARGET="${DEV_PATH_LIB}/${DEV_BOOTSTRAP_BASHLIB64_NAME}"
  DEV_LIB_INSTALLER64_TARGET="${DEV_PATH_LIB}/${DEV_BOOTSTRAP_INSTALLER64_NAME}"

  # Initialize Installer64 parameters
  DEV_PATH_BIN="$DEV_LIB_INSTALLER64_TARGET"
  INST64_BASHLIB64_TARGET="$DEV_LIB_BASHLIB64_TARGET"

  if [[ ! -d "$DEV_BOOTSTRAP_PATH_LIB" ]]; then
    echo "Error: unable to locate module library (${DEV_BOOTSTRAP_PATH_LIB}). Verify or update DEV_BOOTSTRAP_PATH_LIB with the correct path location" 2>&1
    return 1
  fi
}

#
# Main
#

declare dev_bootstrap_process='dev-bootstrap'
declare -i dev_bootstrap_status=0

[[ -n "$DEV_CICD_DEBUG" ]] && set -x

echo "Process: [${dev_bootstrap_process}] started"
dev_bootstrap_initialize &&
  dev_bootstrap_dir_create &&
  dev_bootstrap_dot_env_create &&
  dev_bootstrap_env_create &&
  dev_bootstrap_dot_local_create &&
  dev_bootstrap_dot_secrets_create &&
  dev_bootstrap_dot_env_load &&
  dev_bootstrap_gitignore_create &&
  dev_bootstrap_bin_populate_base &&
  dev_bootstrap_bin_populate_optional &&
  dev_bootstrap_lib_local_run &&
  dev_bootstrap_lib_base_run &&
  echo "$DEV_BIN64_VERSION" >"$DEV_BOOTSTRAP_STATE"
dev_bootstrap_status=$?

if ((dev_bootstrap_status == 0)); then
  echo "Process: [${dev_bootstrap_process}] finished successfully"
else
  echo "Process: [${dev_bootstrap_process}] finished with errors: exit-status-${dev_bootstrap_status}"
fi
exit $dev_bootstrap_status
